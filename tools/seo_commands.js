#!/usr/bin/env node

/**
 * SEOË®ò‰∫ã„Ç∑„Çπ„ÉÜ„É† - „Ç≥„Éû„É≥„Éâ„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
 * Claude CodeÁî®„Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„ÉâÂÆüË£Ö
 */

const fs = require('fs');
const path = require('path');
const ExcelAnalyzer = require('./excel_analyzer');
const ArticleGenerator = require('./article_generator');

class SEOCommands {
    constructor() {
        this.projectRoot = process.env.SEO_SYSTEM_ROOT || path.resolve(__dirname, '..');
        this.analyzer = new ExcelAnalyzer(this.projectRoot);
        this.generator = new ArticleGenerator(this.projectRoot);
    }

    /**
     * /seo:setup - „Ç®„ÇØ„Çª„É´„Éï„Ç°„Ç§„É´„Åã„Çâ„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÊÉÖÂ†±„ÇíË®≠ÂÆö
     */
    async setup(excelPath) {
        try {
            console.log(`üîß SEO Setup: ${excelPath}`);
            
            if (!fs.existsSync(excelPath)) {
                throw new Error(`„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${excelPath}`);
            }

            const result = this.analyzer.analyzeExcel(excelPath);
            const clientDir = await this.analyzer.createClientDirectory(result);
            
            console.log('‚úÖ „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü');
            console.log(`üìÅ „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™: ${clientDir}`);
            console.log(`üÜî G-ID: ${result.customerInfo.gid}`);
            
            return {
                success: true,
                gid: result.customerInfo.gid,
                clientDir,
                customerInfo: result.customerInfo
            };
            
        } catch (error) {
            console.error('‚ùå Setup Error:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * /seo:create [G-ID] [„Ç≥„É≥„ÉÜ„É≥„ÉÑÁï™Âè∑] - Ë®ò‰∫ã‰ΩúÊàê„Éó„É≠„É≥„Éó„ÉàÁîüÊàê
     */
    async create(gid, contentNumber) {
        try {
            console.log(`‚úçÔ∏è Ë®ò‰∫ã‰ΩúÊàê: G-ID=${gid}, „Ç≥„É≥„ÉÜ„É≥„ÉÑ=${contentNumber}`);
            
            const clientDir = path.join(this.projectRoot, 'customers', gid);
            if (!fs.existsSync(clientDir)) {
                throw new Error(`„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${gid}`);
            }

            // È°ßÂÆ¢„Éó„É≠„É≥„Éó„Éà„ÅÆË™≠„ÅøËæº„Åø
            const customerPromptPath = path.join(clientDir, 'customer_prompt.md');
            let customerPrompt = '';
            if (fs.existsSync(customerPromptPath)) {
                customerPrompt = fs.readFileSync(customerPromptPath, 'utf8');
            }

            // „Ç≠„Éº„ÉØ„Éº„ÉâÊÉÖÂ†±„ÅÆË™≠„ÅøËæº„Åø
            const keywordFiles = fs.readdirSync(path.join(clientDir, 'keywords'));
            let keywordInfo = null;
            
            for (const file of keywordFiles) {
                if (file.includes(contentNumber) || file.includes(`content_${contentNumber}`)) {
                    const keywordPath = path.join(clientDir, 'keywords', file);
                    keywordInfo = JSON.parse(fs.readFileSync(keywordPath, 'utf8'));
                    break;
                }
            }

            // Ë®ò‰∫ã‰ΩúÊàê„Éó„É≠„É≥„Éó„Éà„ÅÆÁîüÊàê
            const prompts = await this.generator.generateArticlePrompts(gid, contentNumber, customerPrompt, keywordInfo);
            
            // Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê
            const outputDir = path.join(this.projectRoot, 'output', gid, `content_${contentNumber}`);
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
            }

            // „Éó„É≠„É≥„Éó„Éà„Éï„Ç°„Ç§„É´„ÅÆ‰øùÂ≠ò
            const promptsPath = path.join(outputDir, 'article_prompts.json');
            fs.writeFileSync(promptsPath, JSON.stringify(prompts, null, 2));

            console.log('‚úÖ Ë®ò‰∫ã‰ΩúÊàê„Éó„É≠„É≥„Éó„ÉàÁîüÊàêÂÆå‰∫Ü');
            console.log(`üìÑ „Éó„É≠„É≥„Éó„Éà„Éï„Ç°„Ç§„É´: ${promptsPath}`);

            return {
                success: true,
                prompts,
                outputDir,
                promptsPath
            };

        } catch (error) {
            console.error('‚ùå Create Error:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * /seo:customer [G-ID] - È°ßÂÆ¢ÊÉÖÂ†±„Éó„É≠„É≥„Éó„ÉàÁîüÊàê
     */
    async customer(gid) {
        try {
            const clientDir = path.join(this.projectRoot, 'customers', gid);
            const customerPromptPath = path.join(clientDir, 'customer_prompt.md');
            
            if (!fs.existsSync(customerPromptPath)) {
                throw new Error(`È°ßÂÆ¢„Éó„É≠„É≥„Éó„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${gid}`);
            }

            const customerPrompt = fs.readFileSync(customerPromptPath, 'utf8');
            console.log('üìã È°ßÂÆ¢ÁêÜËß£„Éó„É≠„É≥„Éó„Éà:');
            console.log(customerPrompt);

            return { success: true, customerPrompt };

        } catch (error) {
            console.error('‚ùå Customer Error:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * /seo:keywords [G-ID] [„Ç≥„É≥„ÉÜ„É≥„ÉÑÁï™Âè∑] - „Ç≠„Éº„ÉØ„Éº„ÉâÊÉÖÂ†±Ë°®Á§∫
     */
    async keywords(gid, contentNumber) {
        try {
            const keywordsDir = path.join(this.projectRoot, 'customers', gid, 'keywords');
            
            if (!fs.existsSync(keywordsDir)) {
                throw new Error(`„Ç≠„Éº„ÉØ„Éº„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${gid}`);
            }

            const keywordFiles = fs.readdirSync(keywordsDir);
            let keywordInfo = null;

            for (const file of keywordFiles) {
                if (file.includes(contentNumber)) {
                    const keywordPath = path.join(keywordsDir, file);
                    keywordInfo = JSON.parse(fs.readFileSync(keywordPath, 'utf8'));
                    break;
                }
            }

            if (!keywordInfo) {
                throw new Error(`„Ç≥„É≥„ÉÜ„É≥„ÉÑ${contentNumber}„ÅÆ„Ç≠„Éº„ÉØ„Éº„ÉâÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
            }

            console.log(`üéØ „Ç≠„Éº„ÉØ„Éº„ÉâÊÉÖÂ†± (${gid} - „Ç≥„É≥„ÉÜ„É≥„ÉÑ${contentNumber}):`);
            console.log(JSON.stringify(keywordInfo, null, 2));

            return { success: true, keywordInfo };

        } catch (error) {
            console.error('‚ùå Keywords Error:', error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * /seo:validate [Ë®ò‰∫ã„Éë„Çπ] - Ë®ò‰∫ãÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
     */
    async validate(articlePath) {
        try {
            console.log(`üîç Ë®ò‰∫ãÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ: ${articlePath}`);
            
            if (!fs.existsSync(articlePath)) {
                throw new Error(`Ë®ò‰∫ã„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${articlePath}`);
            }

            const articleContent = fs.readFileSync(articlePath, 'utf8');
            
            // Âü∫Êú¨ÁöÑ„Å™ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØÈ†ÖÁõÆ
            const validationResult = {
                wordCount: this.countWords(articleContent),
                hasTitle: articleContent.includes('#'),
                hasIntroduction: true,
                hasConcusion: articleContent.includes('„Åæ„Å®„ÇÅ') || articleContent.includes('„Åä„Çè„Çä„Å´'),
                keywordDensity: 'N/A', // ÂÆüË£ÖË¶Å
                readability: 'N/A' // ÂÆüË£ÖË¶Å
            };

            console.log('üìä „Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÁµêÊûú:');
            console.log(JSON.stringify(validationResult, null, 2));

            return { success: true, validationResult };

        } catch (error) {
            console.error('‚ùå Validate Error:', error.message);
            return { success: false, error: error.message };
        }
    }

    // „Éò„É´„Éë„Éº„É°„ÇΩ„ÉÉ„Éâ
    countWords(text) {
        return text.length; // Êó•Êú¨Ë™û„ÅÆÂ†¥Âêà„ÅØÊñáÂ≠óÊï∞
    }
}

// CLI„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
if (require.main === module) {
    const seoCommands = new SEOCommands();
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
SEOË®ò‰∫ã„Ç∑„Çπ„ÉÜ„É† - ‰ΩøÁî®ÂèØËÉΩ„Ç≥„Éû„É≥„Éâ:

/seo:setup [„Ç®„ÇØ„Çª„É´„Éï„Ç°„Ç§„É´„Éë„Çπ]
/seo:create [G-ID] [„Ç≥„É≥„ÉÜ„É≥„ÉÑÁï™Âè∑]  
/seo:customer [G-ID]
/seo:keywords [G-ID] [„Ç≥„É≥„ÉÜ„É≥„ÉÑÁï™Âè∑]
/seo:validate [Ë®ò‰∫ã„Éë„Çπ]

‰æã:
node seo_commands.js setup "/path/to/Áô∫Ê≥®Êõ∏.xlsx"
node seo_commands.js create G0016169 01
        `);
        process.exit(0);
    }

    const command = args[0];
    const commandArgs = args.slice(1);

    (async () => {
        try {
            let result;
            
            switch (command) {
                case 'setup':
                    result = await seoCommands.setup(commandArgs[0]);
                    break;
                case 'create':
                    result = await seoCommands.create(commandArgs[0], commandArgs[1]);
                    break;
                case 'customer':
                    result = await seoCommands.customer(commandArgs[0]);
                    break;
                case 'keywords':
                    result = await seoCommands.keywords(commandArgs[0], commandArgs[1]);
                    break;
                case 'validate':
                    result = await seoCommands.validate(commandArgs[0]);
                    break;
                default:
                    console.error(`‚ùå Êú™Áü•„ÅÆ„Ç≥„Éû„É≥„Éâ: ${command}`);
                    process.exit(1);
            }
            
            if (!result.success) {
                process.exit(1);
            }
            
        } catch (error) {
            console.error('‚ùå ÂÆüË°å„Ç®„É©„Éº:', error.message);
            process.exit(1);
        }
    })();
}

module.exports = SEOCommands;